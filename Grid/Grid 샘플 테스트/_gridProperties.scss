// Css Grid 학습 중 Properties 관련 부분

/*
    용어 정리
        - 그리드 컨테이너 : display: grid를 적용하는, Grid의 전체 영역
            Grid 컨테이너 안의 요소들이 Grid 규칙의 영향을 받아 정렬된다고 생각

        - 그리드 아이템 : Grid 컨테이너의 자식 요소들, Grid 규칙에 의해 배치된다
        - 그리드 트랙 : Grid의 행 또는 열
        - 그리드 셀 : Grid의 한 칸을 가리키는 말, 그리드 아이템 하나가 들어가는 가상의 칸 이라고 생각
        - 그리드 라인 : Grid 셀을 구분하는 선
        - 그리드 번호 : Grid 라인의 각 번호
        - 그리드 갭 : Grid 셀 사이의 간격
        - 그리드 영역 : Grid 라인으로 둘러싸인 사각형 영역으로, 그리드 셀의 집합        
*/

// Grid의 속성들은 Flex와 마찬가지로, 컨테이너에 적용 or 아이템에 적용하는 속성들, 이렇게 두 가지로 나뉜다

/*
    Grid Container Properties
        - display: 그리드 컨테이너를 정의
        - grid-template-rows: 명시적 행의 크기를 정의
        - grid-template-columns: 명시적 열의 크기를 정의
        - grid-template-areas: 영역 이름을 참조해 템플릿 생성
        - grid-template: grid-template-xxx의 단축 속성
        - row-gap(grid-row-gap): 행과 행 사이의 간격을 정의
        - column-gap(grid-column-gap): 열과 열 사이의 간격을 정의
        - gap(grid-gap): xxx-gap의 단축 속성
        - grid-auto-rows: 암시적인 행의 크기를 정의
        - grid-auto-columns: 암시적인 열의 크기를 정의
        - grid-auto-flow: 자동 배치 알고리즘 방식을 정의
        - grid: grid-template-xxx와 grid-auto-xxx의 단축 속성
        - align-content: 그리드 콘텐츠를 수직 정렬
        - justify-content: 그리드 콘텐츠를 수평 정렬
        - place-content: align-content와 justify-content의 단축 속성
        - align-items: 그리드 아이템을 수직 정렬
        - justify-items: 그리드 아이템들을 수평 정렬
        - place-items: align-items와 justify-items의 단축 속성
*/

/*
    Grid Item Properties
        - grid-row-start: 그리드 아이템의 행 시작 위치 지정
        - grid-row-end: 그리드 아이템의 행 끝 위치 지정
        - grid-row: grid-row-xxx의 단축 속성
        - grid-column-start: 그리드 아이템의 열 시작 위치 지정
        - grid-column-end: 그리드 아이템의 열 끝 위치 지정
        - grid-column: grid-column-xxx의 단축 속성
        - grid-area: 영역 이름을 설정하거나, grid-row와 grid-column의 단축 속성
        - align-self: 단일 그리드 아이템을 수직 정렬
        - justify-self: 단일 그리드 아이템을 수평 정렬
        - place-self: align-self와 justify-self의 단축 속성
        - order: 그리드 아이템의 배치 순서를 지정
        - z-index: 그리드 아이템의 쌓이는 순서를 지정
*/

// ※Grid Container 정의
.container {
    // 그리드를 사용하기 위해 컨테이너에 필수로 작성
    display: grid;
    // display: inline-grid

    width: 600px;
    height: 600px;
}

// ※그리드 형태 정의
// grid-template-rows,columns
// 컨테이너에 Grid 트랙의 크기들을 지정해주는 속성
// Grid 트랙은  Grid의 행 또는 열을 뜻함
.container {
    // 열의 배치
    grid-template-columns: 250px 250px 250px;

    // 행의 배치
    // grid-template-rows: 200px 200px 200px;

    // fr(fraction) : 숫자 비율대로 트랙의 크기를 나눈다
    // 아래 1fr 1fr 1fr은 균일하게 1:1:1 비율인 3개의 column을 만든다는 의미
    // 이 옵션은 트랙의 길이를 정할 수 있게 상위 엘리먼트의 길이가 정해져있어야 함 or 반대 길이가 정해져있어야 함 (rows <-> columns)
    grid-template-rows: 1fr 1fr 1fr;
    grid-template-columns: 1fr 1fr 1fr;
}

// ※repeat 함수
.container {
    // 반복되는 값을 자동으로 처리할 수 있는 함수
    grid-template-columns: repeat(5, 1fr);
    // grid-template-columns: 1fr 1fr 1fr 1fr 1fr << 과 동일

    // repeat(3, 1fr, 4fr, 2fr); 이런 식의 패턴도 가능
}

// ※minmax 함수
.container {
    // 최소값과 최댓값을 지정할 수 있는 함수
    // ex) minmax(100px, auto)의 의미는 최소 100px, 최대는 자동으로 (auto) 한다는 뜻
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(3, minmax(100px, auto));
}

// ※auto-fill과 auto-fit
.container {
    // column의 개수를 미리 정하지 않고 설정된 너비가 허용하는 한 최대한 셀을 채움

    grid-template-columns: repeat(auto-fill, minmax(20%, auto));
    // auto-fill이 20% 이니 1개의 row에는 5개의 셀이 들어감
    // 셀의 개수가 5개보다 모자라면 공간이 남게 됨

    // 여기서 auto-fill 대신 auto-fit을 사용하면 남는 공간을 채움
    // 이것이 둘의 차이점
}

// ※간격 만들기
.container {
    row-gap: 10px;
    // row의 간격을 10px로

    column-gap: 20px;
    // column의 간격을 20px로

    gap: 10px 20px;
    // row-gap 10px; column-gap: 20px;

    gap: 20px;
    // row-gap 20px; column-gap: 20px;

    grid-gap: 20px;
    gap: 20px;
    // 브라우저 호환 범위를 넓히기 위해 아래처럼 이전 버전의 이름과 현재 버전 이름을 둘 다 쓰기도 함
}

// ※그리드 형태를 자동으로 정의
.container {
    grid-template-rows: repeat(3, minmax(100px, auto));
    // row가 3개로 정해져있을 때엔 위 코드와 같이 최소 100px의 높이 및 컨텐츠가 100px을 넘어갈 시 자동으로 늘어나도록 할 수 있는데 만약 row 개수를 알지 못한다면..?

    grid-auto-rows: minmax(100px, auto);
    // 이와 같이 template 자리에 auto를 넣는 형식으로 대체 가능하다
    // 굳이 횟수를 지정해서 반복할 필요 없이 알아서 처리된다
}

// ※각 셀의 영역 지정
// 해당 부분은 사이트 설명 참고

// ※영역 이름으로 그리드 정의
.container {
    grid-template-areas:
        'header header header'
        'a main b'
        '. . .'
        'footer footer footer';

    // 각 영역(grid Area)에 이름을 붙이고, 그 이름을 이용해서 배치하는 방법 (매우 직관적)

    // 그런데 각 영여의 이름은 어떻게 매칭해야 할까...
    .header {
        grid-area: header;
    }
    .sidebar-a {
        grid-area: a;
    }
    .main-content {
        grid-area: main;
    }
    .sidebar-b {
        grid-area: b;
    }
    .footer {
        grid-area: footer;
    }
    // 이름 값에 따옴표는 붙이지 않게 작성
}

// ※자동 배치 grid-auto-flow
// 아이템이 자동 배치되는 흐름을 결정하는 속성

// 예시는 A, B, C, D, E, F, G, H, I 셀까지 존재한다고 가정
.container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(25%, auto)); // 자동 채움, 가로 기본 크기는 25%, 넘으면 자동
    grid-template-rows: repeat(5, minmax(50px, auto)); // 5줄, 세로 기본 크기는 50px, 넘으면 자동
    grid-auto-flow: dense;
    // dense는 기본적으로 빈 셀을 채우는 알고리즘이며, row와 column 에 따라 기준이 달라진다
}
item:nth-child(2) {
    grid-column: auto / span 3;
}
item:nth-child(5) {
    grid-column: auto / span 3;
}
item:nth-child(7) {
    grid-column: auto / span 2;
}
