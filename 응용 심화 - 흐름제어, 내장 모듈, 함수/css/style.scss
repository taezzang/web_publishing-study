@use 'sass:color';
@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use 'sass:selector';
@use 'sass:meta';
@use 'sass:string';

// 이곳에서 다루는 것들 :
// @if, @each 등의 흐름 제어문
// list 변수와 map 변수
// 내장 모듈이 제공하는 함수 사용하기
// @function 으로 직접 함수 개발하기
// 흐름제어
// 흐름 제어문이라고 부르는 @At-Rules들에 대해 살펴본다
// @if, @each, @for, @while
// Sass 내에서 조건문/반복문을 위해 사용한다
// @if, @else
// 조건에 따른 스타일 반환, 따라서 mixin과 궁합이 좋다
// 인자로 뭘 받아오냐에 따라 분기가 가능하기 때문
@mixin ellipsis($lines: 1) {
    @if ($lines==1) {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    } @else {
        display: -webkit-box;
        overflow: hidden;
        text-overflow: ellipsis;
        -webkit-line-clamp: $lines;
        -webkit-box-orient: vertical;
    }
}
.text {
    @include ellipsis;
}
.long-text {
    @include ellipsis(3);
}
// 위 코드처럼 하지않고 mixin을 두개 만들어서 진행해도 되지만..
// 거의 유사한 코드라 같은 이름 내에서 분기하는게 관리가 좀 더 편할 듯

// @for
// 특정 숫자 범위 내에서 반복시킬 때 사용
// 현재 해당하는 인덱스(주로 $i로 표현)를 활용할 때 좋다
.item {
    $_length: 10;
    $_color: #b2c0d5;

    @for $i from 1 through $_length {
        &:nth-child(#{$i}) {
            z-index: ($_length + 1) - $i;
            background-color: darken($_color, $i * 5%);
        }
    }
}

// @while
// 조건이 true인 동안 반복함
// 다른 반복문인 @for나 @each가 더 직관적이지 거의 사용 안함
// 아래 예제에서 $idx 변수값을 계속 바꿀 수 있다는 점을 주목
.item {
    $idx: 1;
    @while $idx < 5 {
        &:nth-child(#{$idx}) {
            filter: grayscale(1);
            font-size: calc(10vmin + #{$idx * 2}vmin);
        }
        $idx: $idx + 1;
    }
}

// 내장함수
// 미리 정의 된 빌트-인 함수를 제공하고 있어 언제든 가져와 사용 가능

// 색상 함수
// scale() : 색상 값 계산
// sass:color라는 내장 모듈이 필요하므로 @use 규칙으로 가져온다

// @use 'sass:color'; // 모듈 호출
$navy: #0a4069; // 변수 선언

.btn {
    background-color: $navy; // 변수 그대로 사용

    // 사용법은 [네임스페이스].함수() ex) color.scale();
    &:hover {
        background-color: color.scale($navy, $lightness: 20%); // 색상값 변환 후 사용
        // $navy의 값이 달라지더라고 20% 만큼 밝아지는 건 같으니 hover 색상을 따로 수정할 필요가 없어진다.
    }
}

// 색상 함수 목록
// scale() : 색상의 rgb, hsl 등을 -100%에서 +100%까지 조절한 값 리턴함
// mix() : 색상끼리 혼합한 색상값을 리턴
// invert() : 대비되는 색상값을 리턴 (rgb 값을 반대로 해서 반환)
// grayscale() : 동일한 밝기의 회색값을 리턴

// Sass에서 추천은 안하지만 호환성을 위해 빌트인 함수를 전역으로 사용 가능
// if(), hsl(), rgb()는 멤버명 없이 전역으로 사용 가능

// list, map function...
// list와 map 변수를 인자로 받아 특정 값을 리턴
// 저자는 주로 nth()와 get() 함수 사용

// nth() : n번째에 해당하는 list 변수의 값을 알려줌
// @use 'sass:list';
$fontSize: 12px, 16px, 20px;

.title {
    font-size: list.nth($fontSize, 3); // 결과 : 20px
    // 다른 프로그래밍 언어와 달리 1이 리스트의 첫번째 인덱스 값을 의미 ( 0 아님! )
}

// get() : map 변수의 특정 키에 해당하는 값을 알아낼 수 있음
// @use 'sass:map';
$weight: (
    'light': 300,
    'regular': 400,
    'bold': 700,
);

.title {
    // $weight라는 map 변수 내부의 'bold'라는 키에 해당하는 value 가져오기
    font-weight: map.get($weight, 'bold'); // 결과 700
}

// 이런 내장 함수는 반복문 or 조건문과 결합하면 효율 극대화 가능
// ex) @for는 1씩 늘어나는 인덱스를 사용하니 list 내부를 돌면서 인덱스와 일치하는 값을 쓰도록 할 수 있음
$color: red, orange, yellow, green, blue;

.lv {
    @for $i from 1 through list.length($color) {
        &:nth-child(#{$i}) {
            background-color: list.nth($color, $i);
            color: color.invert(list.nth($color, $i));
        }
    }
}

// 리스트 함수 목록
// nth(): 리스트의 n번째에 해당하는 값을 리턴 (음수의 경우 뒤에서부터 계산)
// length(): 리스트의 길이를 리턴
// set-nth(): 리스트의 특정 n번째 요소를 교체하여 리턴
// get(): 맵의 키와 연결된 값을 리턴
// set(): 맵의 키와 연결된 값을 수정하여 리턴
// has-key(): 맵의 키가 존재하는지 여부
// keys(): 맵의 모든 키를 쉼표로 구분하여 리턴
// values(): 맵의 모든 값을 쉼표로 구분하여 리턴

// 그 외...
// 숫자를 계산해주는 sass:math, 문자열을 다루는 sass:string,
// 다른 모듈을 평가할 수 있는 sass:meta, 선택자를 평가하는 sass:selecter 등..
// 여러 내장 모듈들이 존재한다.

// sass:math ex)
h1 {
    position: absolute;
    left: #{math.ceil(49.8)}px; // 올림처리 = 50px
}

// sass:selector ex)
#{selector.append('.button', '.active', '.disabled')} {
    // 셀렉터 묶기
    color: red;
}

// sass:meta ex)
@function add($a, $b) {
    @return $a + $b;
}
.title {
    @if meta.function-exists('add') {
        // 해당 함수가 존재하는지 판단
        font-size: #{add(50, 30)}px; // true
    } @else {
        font-size: 20px;
    }
}

// 함수...
// 내장 함수만으론 깔끔하게 구현이 힘들 경우 본인이 직접 함수를 만들어 사용 가능
// @function 으로 함수를 선언하고 @return 으로 리턴값을 설정하면 됨

// 인자로 들어온 $px 값을 10으로 나눠 리턴하는 함수
@function rem($px) {
    @return #{calc($px / 10)}rem;
    // @return으로 리턴값 명시하는 걸 주의하자
}

.logo {
    width: rem(70); // 70px = 7rem
    height: rem(30); // 30px = 3rem
}
// 함수가 이렇게 같은 파일에 있을 땐 네임스페이스를 안붙이지만,
// 다른 파일에 있다면 모듈을 불러온 후 해당 네임스페이스 붙여야 함

// 함수 내에서 다른 함수를 불러와 쓰는 것도 가능하다.
// 아래는 SVG 아이콘을 변수에 저장 후 함수 호출해 조합해서 사용하는 예제
$icons: (
    sun:
        'M23.9922 38.4651C24.6394 38.4651 25.1717 38.957 25.2358 39.5873L25.2422 39.7151V42.7527C25.2422 43.443 24.6826 44.0027 23.9922 44.0027C23.345 44.0027 22.8127 43.5108 22.7487 42.8805L22.7422 42.7527V39.7151C22.7422 39.0248 23.3019 38.4651 23.9922 38.4651ZM35.8947 34.0978L35.9962 34.1889L38.1441 36.3368C38.6322 36.8249 38.6322 37.6164 38.1441 38.1046C37.6884 38.5602 36.9686 38.5905 36.4778 38.1957L36.3763 38.1046L34.2284 35.9567C33.7403 35.4685 33.7403 34.6771 34.2284 34.1889C34.684 33.7333 35.4039 33.7029 35.8947 34.0978ZM13.755 34.1889C14.2106 34.6445 14.241 35.3644 13.8461 35.8552L13.755 35.9567L11.6071 38.1046C11.119 38.5927 10.3275 38.5927 9.83937 38.1046C9.38376 37.6489 9.35339 36.9291 9.74825 36.4383L9.83937 36.3368L11.9872 34.1889C12.4754 33.7008 13.2668 33.7008 13.755 34.1889ZM23.9999 13.0805C30.0306 13.0805 34.9194 17.9693 34.9194 24C34.9194 30.0306 30.0306 34.9194 23.9999 34.9194C17.9693 34.9194 13.0805 30.0306 13.0805 24C13.0805 17.9693 17.9693 13.0805 23.9999 13.0805ZM23.9999 15.5805C19.35 15.5805 15.5805 19.3501 15.5805 24C15.5805 28.6499 19.35 32.4194 23.9999 32.4194C28.6499 32.4194 32.4194 28.6499 32.4194 24C32.4194 19.3501 28.6499 15.5805 23.9999 15.5805ZM42.7308 22.787C43.4212 22.787 43.9808 23.3467 43.9808 24.037C43.9808 24.6842 43.489 25.2166 42.8586 25.2806L42.7308 25.287H39.6933C39.0029 25.287 38.4433 24.7274 38.4433 24.037C38.4433 23.3898 38.9352 22.8575 39.5655 22.7935L39.6933 22.787H42.7308ZM8.30657 22.7287C8.99692 22.7287 9.55657 23.2884 9.55657 23.9787C9.55657 24.6259 9.06469 25.1582 8.43437 25.2223L8.30657 25.2287H5.26904C4.57869 25.2287 4.01904 24.6691 4.01904 23.9787C4.01904 23.3315 4.51092 22.7992 5.14124 22.7352L5.26904 22.7287H8.30657ZM11.5056 9.8043L11.6071 9.89542L13.755 12.0433C14.2432 12.5314 14.2432 13.3229 13.755 13.811C13.2994 14.2667 12.5796 14.297 12.0887 13.9022L11.9872 13.811L9.83937 11.6632C9.35122 11.175 9.35122 10.3836 9.83937 9.89542C10.295 9.43981 11.0148 9.40943 11.5056 9.8043ZM38.1441 9.89542C38.5997 10.351 38.63 11.0709 38.2352 11.5617L38.1441 11.6632L35.9962 13.811C35.508 14.2992 34.7166 14.2992 34.2284 13.811C33.7728 13.3554 33.7425 12.6356 34.1373 12.1448L34.2284 12.0433L36.3763 9.89542C36.8644 9.40727 37.6559 9.40727 38.1441 9.89542ZM24.0004 3.99731C24.6476 3.99731 25.18 4.48919 25.244 5.11951L25.2504 5.24731V8.28484C25.2504 8.97519 24.6908 9.53484 24.0004 9.53484C23.3532 9.53484 22.8209 9.04296 22.7569 8.41264L22.7504 8.28484V5.24731C22.7504 4.55696 23.3101 3.99731 24.0004 3.99731Z',
    moon:
        'M9.66862399,33.0089622 C14.6391867,41.6182294 25.647814,44.5679822 34.2570813,39.5974194 C36.6016136,38.243803 38.5753268,36.4126078 40.0785961,34.229664 C40.5811964,33.4998226 40.256086,32.4918794 39.421758,32.193262 C32.6414364,29.766492 29.0099482,26.9542522 26.9026684,22.9317305 C24.6842213,18.6970048 24.110919,14.0582926 25.662851,7.69987534 C25.8774494,6.82064469 25.1829812,5.98348115 24.27924,6.03196802 C21.4771404,6.18230425 18.739608,6.98721743 16.2570813,8.42050489 C7.64781404,13.3910676 4.69806124,24.3996949 9.66862399,33.0089622 Z M24.6881449,24.0918536 C26.9913881,28.4884439 30.80035,31.5226926 37.1145781,33.998575 C35.9639388,35.3646621 34.5800621,36.524195 33.0070813,37.4323559 C25.5935456,41.7125627 16.1138943,39.1724978 11.8336875,31.7589622 C7.55348069,24.3454265 10.0935456,14.8657752 17.5070813,10.5855684 C19.0445047,9.69793654 20.6992772,9.08707059 22.4136896,8.76727896 L22.882692,8.68729053 C21.6894389,14.6550319 22.2911719,19.5163454 24.6881449,24.0918536 Z',
);

@function get-color($color) {
    @if $color != '' {
        @return if(string.index($color, '#'), '%23#{string.slice($color, 2)}', '%23#{$color}');
    }
    @return 'none';
}

@function icon($name, $fill: '') {
    $fill-color: get-color($fill);
    $icon: map.get($icons, $name);
    @if $icon {
        $svg: "%3Csvg viewBox='0 0 48 48' xmlns='http://www.w3.org/2000/svg'%3E";
        $path: "%3Cpath d='#{$icon}' fill='#{$fill-color}' /%3E";
        @return url('data:image/svg+xml;charset=utf8,#{$svg}#{$path}%3C/svg%3E');
    } @else {
        @error '#{$name}에 해당하는 아이콘이 존재하지 않습니다.';
    }
}

.icon {
    background-image: icon(sun, $fill: 'ff5a40');
}

.icon2 {
    background-image: icon(moon, $fill: '#ffdb34');
}
