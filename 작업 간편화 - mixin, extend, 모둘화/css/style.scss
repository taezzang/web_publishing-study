@use 'module1';
@use 'module2';
@use 'module3';

// Mixin

// 작업을 편하게 해줄 문법
// @으로 시작하는 At-Rules
// 기본 CSS에서도 @으로 시작하는 것들이 있었음 (@font-face 또는 @media 등)

// @mixin / @include : 스타일 청크(묶음)를 쉽게 재사용할 수 있습니다.
// @extend : 여러 선택자가 스타일을 상속받도록 할 수 있습니다.
// @import / @use : 다른 스타일시트에 있는 변수, 함수, 믹스인 등을 불러와 결합해서 쓸 수 있습니다.
// @function : SassScript에서 사용할 수 있는 사용자 정의 함수를 만들 수 있습니다.
// @if / @each / @for : 상황에 맞춰 CSS가 적용되도록 흐름을 제어할 수 있습니다.

// 사용법
// @mixin {이름} 으로 공통으로 쓸 속성들을 묶는다
// @include {믹스인 이름} 으로 불러와 사용
@mixin set-color {
    color: #fff;
    background-color: yellow;
}

h1 {
    @include set-color;
}

p {
    @include set-color;
}

// 믹스인은 인자값을 가질 수 있음
// 고로 호출 시마다 다르게 정의가 가능
@mixin set-color2($color, $bg-color) {
    color: $color;
    background-color: $bg-color;
}

h2 {
    @include set-color2(#000, #f0f0f0);
}

span {
    @include set-color2(#bada77, #234510);
}

// 일부 인자에는 기본값을 주거나 특정 인자만 넘기는 것도 가능
@mixin bg($name, $path: '/images/', $format: 'png') {
    // 경로는 images/일 가능성이 높고 확장자도 .png를 쓸 확률이 높은경우
    // $path엔 기본값으로 /images/를, $format엔 기본값으로 png를 부여해서 생략이 가능
    //
    background-image: url('#{$path}#{$name}.#{$format}');
}

.logo {
    // path 및 format 생략
    @include bg('logo');
}

.arrow {
    // path 및 format 생략
    @include bg('arrow');
}

.photo {
    // path를 생략하였지만 format은 생략을 안한 경우
    // 다만 인자 순서가 format은 3번째이므로 두번째에 쓸 경우엔..
    // $format: 'jpg'처럼 해당 인자값을 지정해줘야 한다
    @include bg('photo', $format: 'jpg');
}

// TMI
// 인자의 개수를 확정할 수 없는 상태라면 ... 를 써서 임의의 인자를 전달할 수 있다
// ex) @mixin button ($size, $color, $args...) { }
// 임의 인자는 @for나 @each 같은 제어문과 함께 사용하기 좋다

// mixin은 최상위 문이므로, 스타일시트의 최상위 레벨에서 사용함
// 최상위 문이 아닌 다른 문을 mixin 속에 포함 가능 예를 들어 if문
// ex) 버튼을 a에선 사각형, b에선 원형으로 써야 하는 상황일 경우...
@mixin button($size, $radius: 0) {
    width: $size;
    height: $size;

    @if $radius != 0 {
        border-radius: $radius;
    }
}

.btn-square {
    @include button(100px);
}

.btn-circle {
    @include button(100px, $radius: 50%);
}

// @content 구문을 쓰면 @include로 불러와 쓸 때 내용을 추가로 입력 가능
@mixin hover {
    &:hover {
        font-weight: bold;
        @content;
    }

    &.on {
        @content;
    }
}

button {
    // 불러와 쓸 때 내용 입력
    @include hover {
        color: red;
    }
}
//  * 출력결과:

//  button:hover {
//    font-weight: bold;
//    color: red;
//  }

//  button.on {
//    color: red;
//  }

// 강의 글 저자는 미디어쿼리 분기문을 믹스인으로 만든 뒤 다른 곳에서 불러와 쓰는 용도로 사용

// Break Point
$tablet: 768px;
$mobile: 540px;

// Tablet
@mixin res--tablet {
    @media screen and (min-width: #{$tablet}) {
        @content;
    }
}

// Mobile
@mixin res--mobile {
    @media screen and (min-width: #{$mobile}) {
        @content;
    }
}

.title {
    font-size: 16px;

    @include res--tablet {
        font-size: 14px;
    }

    @include res--mobile {
        font-size: 12px;
    }
}

// IR 기법 공통 믹스인
@mixin blind {
    position: absolute;
    width: 1px;
    height: 1px;
    margin: -1px;
    padding: 0;
    overflow: hidden;
    border: 0;
    white-space: nowrap;
    clip: rect(0, 0, 0, 0);
}

// 말줄임 처리 공통 믹스인
@mixin ellipsis($lines: 1) {
    @if ($lines==1) {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    } @else {
        display: -webkit-box;
        overflow: hidden;
        text-overflow: ellipsis;
        -webkit-line-clamp: $lines;
        -webkit-box-orient: vertical;
    }
}

// Extend : 확장
// 기본 내용에서 뭔가를 덧붙일 때 사용
// 사용법은 이미 존재하는 셀렉터를 @extend로 지정
.button {
    font-weight: bold;
    border-width: 1px;
}

.button-confirm {
    @extend .button;
    border-color: blue;
}

.button-error {
    @extend .button;
    border-color: red;
}

// placeholder
// extend는 확장시킬 기본 스타일 선언이 필요 (이 스타일은 컴파일 된다)
// 확장만을 위해 스타일을 선언할 것이라면 % 기호를 사용할 수 있다
%title {
    color: blue;
    font-weight: bold;
}
// %title은 컴파일된 style.css 포함 되지 않는다!

.title-main {
    @extend %title;
    font-size: 30px;
}

.title-sub {
    @extend %title;
    font-size: 18px;
}

// @mixin vs @extend
// @mixin :
//      인자 넣기 가능
//      선택자 관리가 쉬워서 전역으로 쓰기 편함
//      컴파일된 CSS가 길어짐
// @extend :
//      연관성 있는 셀렉터들을 묶어 관리 가능
//      미디어쿼리 등으로 셀렉터가 묶일 수 없다면 못 씀

// @mixin : 미리 정의한 속성을 복사해서 따로 적용
// @extend :  선택자를 함께 묶어 속성을 한번에 적용

// 핵심은 "얼마나 연관성이 있는가"

// 선택자끼리 의미론적 관계가 있다면 @extend를,
// 그렇지 않고 단순히 속성만 겹치는 관계라면 @mixin을 쓰는 것을 추천

// 모듈화

// CSS 쪼개기
// 각 영역의 스타일을 분리해서 작성하면 더 효율적으로 스타일시트 관리 가능

// @import로 타 스타일시트를 불러올 수 있다.
// 일반 CSS에서 불러오는 방식은 직렬로 불러오기 때문에 권장하지 않는다.

// Sass에서 @import를 통해 불러오는 건 좀 다름
// Sass의 import는 "컴파일 과정에서 처리됨" 때문에 브라우저가 HTTP 요청을 여러 번 안해도 됨

// _common.scss
@import 'common';

.button-important {
    color: red;
}

// @import를 통해 변수, 믹스인도 가져올 수 있다.
// _variable.scss, _mixin.scss 등으로 분리하면 좋을 듯

// 이름 앞에 언더바 ( _ )가 붙은 scss는 컴파일되지 않는다.
// 언더바 없이 작성한 스타일시트는 모두 독립적으로 컴파일됨
// @import 할 때는 현재 파일 기준으로 찾는다.

@import 'module1';
@import 'module2';
@import 'module3';

h1 {
    font-weight: $font-weight;
}

// @use
//  - 항상 파일 시작부분에 쓰여야 함. 스타일 규칙에 포함 X
//  - 가져온 멤버는 모두 네임스페이스를 갖는다.
//  - 여러번 @use 하더라도 중복해서 가져오지 않는다.
//  - 언더바(_) 또는 하이픈(-)으로 시작하는 멤버는 프라이빗으로 취급해 가져오지 않는다.

// @import와 비슷하게 @use <불러올 scss 파일>
// 차이점 : 멤버 사용 시 네임스페이스 지정

// @use문을 이렇게 중간에 작성하면 에러가 난다!
// @use 'module1';
// @use 'module2';
// @use 'module3';

h1 {
    font-weight: module1.$font-weight;
}

// 함수 및 mixin 등 다른 멤버들에게도 동일하게 네임스페이스 붙이자
// @include 할 때 어느 파일의 mix인지 이름 적어야 함
// @use 'mixin';

// .title {
//   @include mixin.ellipsis;
// }
